PrimitiveTypes Chapter4
==========================
1) Reset  the lowermost set Bit  x&(x-1)
2) Extract the lowermost set Bit  x&~(x-1)
3) To Swap a bit XOR with 1 ( 0 ^1 = 1, 1^1 = 0)
4) To Forward the rightmost set bit  x | (x-1)  

0111 (7)
0110 (6)
======
1101


5) Last n bits will be the reminder when doing the modulo operation with 2^n
6) To Check if x is Power of 2 !(x & (x-1))
7) XOR operation is assocative & Commutative
   Associative A + (B+C) = (A+B)+C
   Commutative A+B = B+A
8) Consider using cached results when trying to improve Time Complexity of Bit related problems.
   Examples: Reverse Bits in an integer, Parity of a number.
9) When working with Bitwise operators be mindful of precedence. 
   Just to be safe include parentheses wherever possible to avoid any issues caused by precedence of operators.
 
Arrays Chapter5
=======================
1) Numbers > 1 and divisible only by itself is a prime number.
To test if A is a prime number you need to check if it is divisible by any of the numbers from 2 to sqrt(A)

Strings 
=======
1) How to split a string based on delimiter? Convert string to stringstream and use std::getline(stream& getline (istream& is, string& str, char delim);).



LinkedList Chapter 7
=====================
1) Use Fast, Slow pointers to detect the first half and second half of the list. Slow will endup pointing to the first node in the second half of the list


Stack & Queue Chapter 8
========================
1) rotate vector API is useful for circular queue implementation.  std::rotate(myvector.begin(),myvector.begin()+3,myvector.end());
2) Implement Stack with Max, key is to store max along with data. To further improve space complexity, you can have an additional stack to store the max.


HashTable
=========
1) For unordered_map there is no method to get the keys (for example there is no keys()).
for(auto kv : myMap)
{
  // kv.first is the key
  // kv.seond is the value
}
